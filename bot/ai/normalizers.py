import re


def noralize_observation_image_result(result):
    return {
        "name": result.get("name", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"),
        "value": result.get("value", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"),
    }


def normalize_observation_interpretation_result(result):
    return {
        "name": result.get("name", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"),
        "value": result.get("value", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"),
        "normsMan": result.get("normsMan", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"),
        "normsWoman": result.get("normsWoman", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"),
        "description": result.get("description", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"),
        "reasons": result.get("reasons", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"),
        "conclusion": result.get("conclusion", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"),
        "conclusion_code": result.get("conclusion_code", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"),
    }


def normalize_message_result(normalized_result):
    result_is_normal = normalized_result["conclusion_code"] == "+"
    result_color = "üü¢" if result_is_normal else "üî¥"

    reasons_text = (
        ("\n" f"<b>–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è</b>: {normalized_result['reasons']}\n")
        if not result_is_normal
        else ""
    )
    conclusion_text = (
        "\n"
        f"<b>{'–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏' if not result_is_normal else '–ó–∞–∫–ª—é—á–µ–Ω–∏–µ' }</b>: {normalized_result['conclusion']}\n"
    )
    consult_advice = (
        ("\n" f"<b>–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞!</b>")
        if not result_is_normal
        else ""
    )

    message = (
        f"{result_color} <b>{normalized_result['name']} - {normalized_result['value']}</b>\n"
        "\n"
        f"–ù–æ—Ä–º—ã –¥–ª—è –º—É–∂—á–∏–Ω: {normalized_result['normsMan']}\n"
        f"–ù–æ—Ä–º—ã –¥–ª—è –∂–µ–Ω—â–∏–Ω: {normalized_result['normsWoman']}\n"
        "\n"
        f"<b>–û–ø–∏—Å–∞–Ω–∏–µ</b>: {normalized_result['description']}\n"
        f"{reasons_text}"
        f"{conclusion_text}"
        f"{consult_advice}"
    )

    return message


def strip_html_tags(text):
    return re.sub("<[^<]+?>", "", text)
